// @ts-nocheck
/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
import { createBlock as _createBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, renderList as _renderList, toDisplayString as _toDisplayString, vModelCheckbox as _vModelCheckbox, vModelRadio as _vModelRadio, vModelSelect as _vModelSelect, vModelText as _vModelText, withDirectives as _withDirectives } from 'vue'
// tslint:disable
/* eslint-disable */

export function appTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", null, [
    _createVNode("ul", { class: "bookmarks list-unstyled" }, [
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.bookmarks, (bookmark, index) => {
        return (_openBlock(), _createBlock("li", {
          key: bookmark.name
        }, [
          _createVNode("button", {
            class: "btn btn-link btn-xs",
            onClick: $event => (_ctx.useBookmark(index))
          }, _toDisplayString(bookmark.name), 9 /* TEXT, PROPS */, ["onClick"]),
          _createVNode("button", {
            class: "btn btn-link btn-xs",
            onClick: $event => (_ctx.deleteBookmark(index))
          }, "delete", 8 /* PROPS */, ["onClick"])
        ]))
      }), 128 /* KEYED_FRAGMENT */))
    ]),
    _createVNode("div", { class: "main" }, [
      _createVNode("div", { class: "container" }, [
        _createVNode("div", { class: "row" }, [
          _createVNode("div", { class: "col-md-12" }, [
            _createVNode("h1", null, "WebSocket/Socket.IO/Stomp/Bayeux/HTTP/TCP/UDP/WebRTC/DNS Test Tool")
          ])
        ]),
        _createVNode("div", { class: "row" }, [
          _createVNode("div", { class: "col-md-12" }, [
            _createVNode("label", null, [
              _withDirectives(_createVNode("input", {
                type: "radio",
                "onUpdate:modelValue": _cache[1] || (_cache[1] = $event => (_ctx.protocol = $event)),
                value: "WebSocket",
                disabled: _ctx.isConnected
              }, null, 8 /* PROPS */, ["disabled"]), [
                [_vModelRadio, _ctx.protocol]
              ]),
              _createTextVNode(" WebSocket ")
            ]),
            _createVNode("label", null, [
              _withDirectives(_createVNode("input", {
                type: "radio",
                "onUpdate:modelValue": _cache[2] || (_cache[2] = $event => (_ctx.protocol = $event)),
                value: "HTTP",
                disabled: _ctx.isConnected
              }, null, 8 /* PROPS */, ["disabled"]), [
                [_vModelRadio, _ctx.protocol]
              ]),
              _createTextVNode(" HTTP ")
            ]),
            _createVNode("label", null, [
              _withDirectives(_createVNode("input", {
                type: "radio",
                "onUpdate:modelValue": _cache[3] || (_cache[3] = $event => (_ctx.protocol = $event)),
                value: "TCP",
                disabled: _ctx.isConnected
              }, null, 8 /* PROPS */, ["disabled"]), [
                [_vModelRadio, _ctx.protocol]
              ]),
              _createTextVNode(" TCP ")
            ]),
            _createVNode("label", null, [
              _withDirectives(_createVNode("input", {
                type: "radio",
                "onUpdate:modelValue": _cache[4] || (_cache[4] = $event => (_ctx.protocol = $event)),
                value: "UDP",
                disabled: _ctx.isConnected
              }, null, 8 /* PROPS */, ["disabled"]), [
                [_vModelRadio, _ctx.protocol]
              ]),
              _createTextVNode(" UDP ")
            ]),
            _createVNode("label", null, [
              _withDirectives(_createVNode("input", {
                type: "radio",
                "onUpdate:modelValue": _cache[5] || (_cache[5] = $event => (_ctx.protocol = $event)),
                value: "WebRTC",
                disabled: _ctx.isConnected
              }, null, 8 /* PROPS */, ["disabled"]), [
                [_vModelRadio, _ctx.protocol]
              ]),
              _createTextVNode(" WebRTC ")
            ])
          ])
        ]),
        (_ctx.protocol === 'WebSocket' || _ctx.protocol === 'HTTP')
          ? (_openBlock(), _createBlock("div", {
              key: 0,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-10" }, [
                _withDirectives(_createVNode("input", {
                  id: "url",
                  type: "url",
                  class: "form-control",
                  "onUpdate:modelValue": _cache[6] || (_cache[6] = $event => (_ctx.url = $event)),
                  placeholder: "url"
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.url]
                ])
              ]),
              (_ctx.protocol === 'WebSocket')
                ? (_openBlock(), _createBlock("div", {
                    key: 0,
                    class: "col-md-2"
                  }, [
                    _withDirectives(_createVNode("input", {
                      type: "text",
                      class: "form-control",
                      placeholder: "subprotocol",
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = $event => (_ctx.subprotocol = $event))
                    }, null, 512 /* NEED_PATCH */), [
                      [_vModelText, _ctx.subprotocol]
                    ])
                  ]))
                : (_openBlock(), _createBlock("div", {
                    key: 1,
                    class: "col-md-2"
                  }, [
                    _withDirectives(_createVNode("select", {
                      class: "form-control",
                      "onUpdate:modelValue": _cache[8] || (_cache[8] = $event => (_ctx.httpMethod = $event))
                    }, [
                      _createVNode("option", null, "GET"),
                      _createVNode("option", null, "POST"),
                      _createVNode("option", null, "PUT"),
                      _createVNode("option", null, "DELETE"),
                      _createVNode("option", null, "PATCH"),
                      _createVNode("option", null, "COPY"),
                      _createVNode("option", null, "HEAD"),
                      _createVNode("option", null, "OPTIONS"),
                      _createVNode("option", null, "LINK"),
                      _createVNode("option", null, "UNLINK"),
                      _createVNode("option", null, "PURGE")
                    ], 512 /* NEED_PATCH */), [
                      [_vModelSelect, _ctx.httpMethod]
                    ])
                  ]))
            ]))
          : _createCommentVNode("v-if", true),
        (_ctx.protocol === 'TCP' || _ctx.protocol === 'UDP')
          ? (_openBlock(), _createBlock("div", {
              key: 1,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-3" }, [
                _withDirectives(_createVNode("input", {
                  class: "form-control",
                  "onUpdate:modelValue": _cache[9] || (_cache[9] = $event => (_ctx.host = $event)),
                  placeholder: "host"
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.host]
                ])
              ]),
              _createVNode("div", { class: "col-md-2" }, [
                _withDirectives(_createVNode("input", {
                  type: "number",
                  class: "form-control",
                  placeholder: "port",
                  "onUpdate:modelValue": _cache[10] || (_cache[10] = $event => (_ctx.port = $event))
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.port]
                ])
              ])
            ]))
          : _createCommentVNode("v-if", true),
        (_ctx.protocol === 'WebRTC')
          ? (_openBlock(), _createBlock("div", {
              key: 2,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-3" }, [
                _withDirectives(_createVNode("input", {
                  type: "text",
                  class: "form-control",
                  placeholder: "data channel",
                  "onUpdate:modelValue": _cache[11] || (_cache[11] = $event => (_ctx.dataChannelName = $event))
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.dataChannelName]
                ])
              ]),
              _createVNode("div", { class: "col-md-3" }, [
                _createVNode("button", {
                  class: "btn btn-primary btn-sm",
                  onClick: _cache[12] || (_cache[12] = $event => (_ctx.createDataChannel())),
                  disabled: !_ctx.dataChannelName || _ctx.dataChannelStatus !== 'none' || !_ctx.peerConnection
                }, "create data channel", 8 /* PROPS */, ["disabled"])
              ])
            ]))
          : _createCommentVNode("v-if", true),
        (_ctx.protocol === 'WebRTC')
          ? (_openBlock(), _createBlock("div", {
              key: 3,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-12" }, [
                _withDirectives(_createVNode("textarea", {
                  style: {"width":"100%","height":"110px"},
                  class: "form-control",
                  placeholder: "session description(offer or answer)",
                  "onUpdate:modelValue": _cache[13] || (_cache[13] = $event => (_ctx.sessionDescription = $event))
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.sessionDescription]
                ])
              ])
            ]))
          : _createCommentVNode("v-if", true),
        _createVNode("div", { class: "row" }, [
          _createVNode("div", { class: "col-md-12" }, [
            (_ctx.protocol !== 'HTTP' && _ctx.protocol !== 'UDP' && _ctx.protocol !== 'WebRTC')
              ? (_openBlock(), _createBlock("button", {
                  key: 0,
                  class: "btn btn-primary btn-sm",
                  onClick: _cache[14] || (_cache[14] = $event => (_ctx.connect())),
                  disabled: _ctx.isConnected
                }, "connect", 8 /* PROPS */, ["disabled"]))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol !== 'HTTP' && _ctx.protocol !== 'UDP' && _ctx.protocol !== 'WebRTC')
              ? (_openBlock(), _createBlock("button", {
                  key: 1,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[15] || (_cache[15] = $event => (_ctx.close())),
                  disabled: _ctx.isDisconnected
                }, "disconnect", 8 /* PROPS */, ["disabled"]))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'WebSocket' || _ctx.protocol === 'HTTP')
              ? (_openBlock(), _createBlock("button", {
                  key: 2,
                  class: "btn btn-default btn-sm clipboard",
                  "data-clipboard-target": "#url"
                }, "copy URL"))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'WebSocket' || _ctx.protocol === 'HTTP')
              ? (_openBlock(), _createBlock("button", {
                  key: 3,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[16] || (_cache[16] = $event => (_ctx.addParameter()))
                }, "add a parameter"))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'HTTP')
              ? (_openBlock(), _createBlock("button", {
                  key: 4,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[17] || (_cache[17] = $event => (_ctx.addHeader()))
                }, "add a header"))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'HTTP')
              ? (_openBlock(), _createBlock("button", {
                  key: 5,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[18] || (_cache[18] = $event => (_ctx.addFormData()))
                }, "add a form data"))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'WebRTC')
              ? (_openBlock(), _createBlock("button", {
                  key: 6,
                  class: "btn btn-primary btn-sm",
                  onClick: _cache[19] || (_cache[19] = $event => (_ctx.createOffer())),
                  disabled: _ctx.dataChannelStatus !== 'init' && _ctx.dataChannelStatus !== 'created offer'
                }, "create offer", 8 /* PROPS */, ["disabled"]))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'WebRTC')
              ? (_openBlock(), _createBlock("button", {
                  key: 7,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[20] || (_cache[20] = $event => (_ctx.answerOffer())),
                  disabled: (_ctx.dataChannelStatus !== 'init' && _ctx.dataChannelStatus !== 'answered offer') || !_ctx.sessionDescription
                }, "answer offer", 8 /* PROPS */, ["disabled"]))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'WebRTC')
              ? (_openBlock(), _createBlock("button", {
                  key: 8,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[21] || (_cache[21] = $event => (_ctx.setAnswer())),
                  disabled: _ctx.dataChannelStatus !== 'created offer' || !_ctx.sessionDescription
                }, "set answer", 8 /* PROPS */, ["disabled"]))
              : _createCommentVNode("v-if", true),
            _createVNode("button", {
              class: "btn btn-default btn-sm",
              onClick: _cache[22] || (_cache[22] = $event => (_ctx.showTips()))
            }, "show tips"),
            (_ctx.protocol === 'WebSocket')
              ? (_openBlock(), _createBlock("button", {
                  key: 9,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[23] || (_cache[23] = $event => (_ctx.toggleSocketIO()))
                }, _toDisplayString(_ctx.socketIOIsHidden ? "show socket.io" : "hide socket.io"), 1 /* TEXT */))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'WebSocket' || _ctx.protocol === 'TCP')
              ? (_openBlock(), _createBlock("button", {
                  key: 10,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[24] || (_cache[24] = $event => (_ctx.toggleStomp()))
                }, _toDisplayString(_ctx.stompIsHidden ? "show stomp" : "hide stomp"), 1 /* TEXT */))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'WebSocket')
              ? (_openBlock(), _createBlock("button", {
                  key: 11,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[25] || (_cache[25] = $event => (_ctx.toggleBayeux()))
                }, _toDisplayString(_ctx.bayeuxIsHidden ? "show bayeux" : "hide bayeux"), 1 /* TEXT */))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol !== 'HTTP')
              ? (_openBlock(), _createBlock("button", {
                  key: 12,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[26] || (_cache[26] = $event => (_ctx.toggleProtobuf()))
                }, _toDisplayString(_ctx.protobufIsHidden ? "show protobuf" : "hide protobuf"), 1 /* TEXT */))
              : _createCommentVNode("v-if", true),
            (_ctx.protocol === 'UDP')
              ? (_openBlock(), _createBlock("button", {
                  key: 13,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[27] || (_cache[27] = $event => (_ctx.toggleDNS()))
                }, _toDisplayString(_ctx.dnsIsHidden ? "show DNS" : "hide DNS"), 1 /* TEXT */))
              : _createCommentVNode("v-if", true)
          ])
        ]),
        (!_ctx.socketIOIsHidden && _ctx.protocol === 'WebSocket')
          ? (_openBlock(), _createBlock("div", {
              key: 4,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-12" }, [
                _createVNode("label", null, [
                  _withDirectives(_createVNode("input", {
                    type: "checkbox",
                    "onUpdate:modelValue": _cache[28] || (_cache[28] = $event => (_ctx.isSocketIO = $event)),
                    disabled: _ctx.isConnected
                  }, null, 8 /* PROPS */, ["disabled"]), [
                    [_vModelCheckbox, _ctx.isSocketIO]
                  ]),
                  _createTextVNode(" socket.io ")
                ]),
                _createVNode("label", null, [
                  _withDirectives(_createVNode("input", {
                    type: "checkbox",
                    "onUpdate:modelValue": _cache[29] || (_cache[29] = $event => (_ctx.ignorePing = $event)),
                    disabled: _ctx.isConnected || !_ctx.isSocketIO
                  }, null, 8 /* PROPS */, ["disabled"]), [
                    [_vModelCheckbox, _ctx.ignorePing]
                  ]),
                  _createTextVNode(" will hide ping/pong of socket.io ")
                ]),
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[30] || (_cache[30] = $event => (_ctx.useSocketIOSendMessage()))
                }, "use socket.io to send message")
              ])
            ]))
          : _createCommentVNode("v-if", true),
        (!_ctx.stompIsHidden && (_ctx.protocol === 'WebSocket' || _ctx.protocol === 'TCP'))
          ? (_openBlock(), _createBlock("div", {
              key: 5,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-12" }, [
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[31] || (_cache[31] = $event => (_ctx.useStompConnectionMessage()))
                }, "use stomp connection message"),
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[32] || (_cache[32] = $event => (_ctx.useStompSubscriptionMessage()))
                }, "use stomp subscription message"),
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[33] || (_cache[33] = $event => (_ctx.useStompSendMessage()))
                }, "use stomp send message")
              ])
            ]))
          : _createCommentVNode("v-if", true),
        (!_ctx.bayeuxIsHidden && _ctx.protocol === 'WebSocket')
          ? (_openBlock(), _createBlock("div", {
              key: 6,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-12" }, [
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[34] || (_cache[34] = $event => (_ctx.useBayeuxHandshakeMessage()))
                }, "use bayeux handshake message"),
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[35] || (_cache[35] = $event => (_ctx.useBayeuxSubscribeMessage()))
                }, "use bayeux subscribe message"),
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[36] || (_cache[36] = $event => (_ctx.useBayeuxPublishMessage()))
                }, "use bayeux publish message"),
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[37] || (_cache[37] = $event => (_ctx.useBayeuxPingMessage()))
                }, "use bayeux ping message")
              ])
            ]))
          : _createCommentVNode("v-if", true),
        _createVNode("div", { class: "row" }, [
          (_ctx.protocol !== 'HTTP' || _ctx.shouldContainBody)
            ? (_openBlock(), _createBlock("div", {
                key: 0,
                class: "col-md-12"
              }, [
                (_ctx.protocol !== 'HTTP' || _ctx.shouldContainBody)
                  ? (_openBlock(), _createBlock("label", { key: 0 }, [
                      _withDirectives(_createVNode("input", {
                        type: "radio",
                        "onUpdate:modelValue": _cache[38] || (_cache[38] = $event => (_ctx.messageType = $event)),
                        value: "string"
                      }, null, 512 /* NEED_PATCH */), [
                        [_vModelRadio, _ctx.messageType]
                      ]),
                      _createTextVNode(" string ")
                    ]))
                  : _createCommentVNode("v-if", true),
                (_ctx.protocol !== 'HTTP')
                  ? (_openBlock(), _createBlock("label", { key: 1 }, [
                      _withDirectives(_createVNode("input", {
                        type: "radio",
                        "onUpdate:modelValue": _cache[39] || (_cache[39] = $event => (_ctx.messageType = $event)),
                        value: "Uint8Array"
                      }, null, 512 /* NEED_PATCH */), [
                        [_vModelRadio, _ctx.messageType]
                      ]),
                      _createTextVNode(" Uint8Array ")
                    ]))
                  : _createCommentVNode("v-if", true),
                (_ctx.protocol !== 'HTTP')
                  ? (_openBlock(), _createBlock("label", { key: 2 }, [
                      _withDirectives(_createVNode("input", {
                        type: "radio",
                        "onUpdate:modelValue": _cache[40] || (_cache[40] = $event => (_ctx.messageType = $event)),
                        value: "protobuf"
                      }, null, 512 /* NEED_PATCH */), [
                        [_vModelRadio, _ctx.messageType]
                      ]),
                      _createTextVNode(" protobuf ")
                    ]))
                  : _createCommentVNode("v-if", true),
                (_ctx.protocol === 'HTTP' && _ctx.shouldContainBody)
                  ? (_openBlock(), _createBlock("label", { key: 3 }, [
                      _withDirectives(_createVNode("input", {
                        type: "radio",
                        "onUpdate:modelValue": _cache[41] || (_cache[41] = $event => (_ctx.messageType = $event)),
                        value: "FormData"
                      }, null, 512 /* NEED_PATCH */), [
                        [_vModelRadio, _ctx.messageType]
                      ]),
                      _createTextVNode(" FormData ")
                    ]))
                  : _createCommentVNode("v-if", true)
              ]))
            : _createCommentVNode("v-if", true)
        ]),
        (!_ctx.protobufIsHidden)
          ? (_openBlock(), _createBlock("div", {
              key: 7,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-5" }, [
                _withDirectives(_createVNode("textarea", {
                  style: {"width":"100%","height":"150px"},
                  class: "form-control",
                  "onUpdate:modelValue": _cache[42] || (_cache[42] = $event => (_ctx.protobufContent = $event)),
                  placeholder: "protobuf file content"
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.protobufContent]
                ])
              ]),
              _createVNode("div", { class: "col-md-3" }, [
                _withDirectives(_createVNode("input", {
                  type: "text",
                  class: "form-control input-sm",
                  "onUpdate:modelValue": _cache[43] || (_cache[43] = $event => (_ctx.protobufTypePath = $event)),
                  placeholder: "protobuf type path"
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.protobufTypePath]
                ])
              ]),
              _createVNode("div", { class: "col-md-4" }, [
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  disabled: !_ctx.protobufContent || !_ctx.protobufTypePath,
                  onClick: _cache[44] || (_cache[44] = $event => (_ctx.loadProtobuf()))
                }, "load", 8 /* PROPS */, ["disabled"])
              ])
            ]))
          : (_openBlock(), _createBlock("div", {
              key: 8,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-6" }, [
                (_ctx.protocol !== 'HTTP' || _ctx.shouldContainBody)
                  ? (_openBlock(), _createBlock("div", {
                      key: 0,
                      class: "col-md-12"
                    }, [
                      (!_ctx.isPreview)
                        ? (_openBlock(), _createBlock(_Fragment, { key: 0 }, [
                            (_ctx.shouldShowMessageTextarea)
                              ? _withDirectives((_openBlock(), _createBlock("textarea", {
                                  key: 0,
                                  style: {"width":"100%","height":"150px"},
                                  class: "form-control",
                                  "onUpdate:modelValue": _cache[45] || (_cache[45] = $event => (_ctx.message = $event))
                                }, null, 512 /* NEED_PATCH */)), [
                                  [_vModelText, _ctx.message]
                                ])
                              : (_openBlock(true), _createBlock(_Fragment, { key: 1 }, _renderList(_ctx.formDatas, (formData, index) => {
                                  return (_openBlock(), _createBlock("div", {
                                    key: formData.key,
                                    class: "row"
                                  }, [
                                    _createVNode("div", { class: "col-md-3" }, [
                                      _createVNode("input", {
                                        type: "text",
                                        class: "form-control input-sm",
                                        value: formData.key,
                                        onKeyup: $event => (_ctx.setKeyOfFormData(index, $event)),
                                        placeholder: "form data name"
                                      }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onKeyup"])
                                    ]),
                                    _createVNode("div", { class: "col-md-5" }, [
                                      (formData.type === 'text')
                                        ? (_openBlock(), _createBlock("input", {
                                            key: 0,
                                            type: "text",
                                            class: "form-control input-sm",
                                            value: formData.value,
                                            onKeyup: $event => (_ctx.setValueOfFormData(index, $event)),
                                            placeholder: "form data value"
                                          }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onKeyup"]))
                                        : (_openBlock(), _createBlock("input", {
                                            key: 1,
                                            type: "file",
                                            class: "form-control input-sm",
                                            onChange: $event => (_ctx.setValueOfFormData(index, $event)),
                                            placeholder: "form data value"
                                          }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["onChange"]))
                                    ]),
                                    _createVNode("div", { class: "col-md-2" }, [
                                      _createVNode("select", {
                                        class: "form-control",
                                        value: formData.type,
                                        onChange: $event => (_ctx.setTypeOfFormData(index, $event))
                                      }, [
                                        _createVNode("option", { value: "text" }, "text"),
                                        _createVNode("option", { value: "file" }, "file")
                                      ], 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onChange"])
                                    ]),
                                    _createVNode("div", { class: "col-md-2" }, [
                                      _createVNode("button", {
                                        class: "btn btn-link btn-sm",
                                        onClick: $event => (_ctx.deleteFormData(index))
                                      }, "delete", 8 /* PROPS */, ["onClick"])
                                    ])
                                  ]))
                                }), 128 /* KEYED_FRAGMENT */))
                          ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
                        : (_openBlock(), _createBlock("pre", { key: 1 }, _toDisplayString(_ctx.previewResult), 1 /* TEXT */))
                    ]))
                  : _createCommentVNode("v-if", true)
              ]),
              (_ctx.protocol === 'WebSocket' || _ctx.protocol === 'HTTP')
                ? (_openBlock(), _createBlock("div", {
                    key: 0,
                    class: "col-md-6"
                  }, [
                    (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.parameters, (parameter, index) => {
                      return (_openBlock(), _createBlock("div", {
                        key: parameter.key,
                        class: "row"
                      }, [
                        _createVNode("div", { class: "col-md-3" }, [
                          _createVNode("input", {
                            type: "text",
                            class: "form-control input-sm",
                            value: parameter.key,
                            onKeyup: $event => (_ctx.setKeyOfParameter(index, $event)),
                            placeholder: "parameter name"
                          }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onKeyup"])
                        ]),
                        _createVNode("div", { class: "col-md-7" }, [
                          _createVNode("input", {
                            type: "text",
                            class: "form-control input-sm",
                            value: parameter.value,
                            onKeyup: $event => (_ctx.setValueOfParameter(index, $event)),
                            placeholder: "parameter value"
                          }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onKeyup"])
                        ]),
                        _createVNode("div", { class: "col-md-2" }, [
                          _createVNode("button", {
                            class: "btn btn-link btn-sm",
                            onClick: $event => (_ctx.deleteParameter(index))
                          }, "delete", 8 /* PROPS */, ["onClick"])
                        ])
                      ]))
                    }), 128 /* KEYED_FRAGMENT */)),
                    (_ctx.protocol === 'HTTP')
                      ? (_openBlock(true), _createBlock(_Fragment, { key: 0 }, _renderList(_ctx.headers, (header, index) => {
                          return (_openBlock(), _createBlock("div", {
                            key: header.key,
                            class: "row"
                          }, [
                            _createVNode("div", { class: "col-md-3" }, [
                              _createVNode("input", {
                                type: "text",
                                class: "form-control input-sm",
                                value: header.key,
                                onKeyup: $event => (_ctx.setKeyOfHeader(index, $event)),
                                placeholder: "header name"
                              }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onKeyup"])
                            ]),
                            _createVNode("div", { class: "col-md-7" }, [
                              _createVNode("input", {
                                type: "text",
                                class: "form-control input-sm",
                                value: header.value,
                                onKeyup: $event => (_ctx.setValueOfHeader(index, $event)),
                                placeholder: "header value"
                              }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onKeyup"])
                            ]),
                            _createVNode("div", { class: "col-md-2" }, [
                              _createVNode("button", {
                                class: "btn btn-link btn-sm",
                                onClick: $event => (_ctx.deleteHeader(index))
                              }, "delete", 8 /* PROPS */, ["onClick"])
                            ])
                          ]))
                        }), 128 /* KEYED_FRAGMENT */))
                      : _createCommentVNode("v-if", true)
                  ]))
                : _createCommentVNode("v-if", true)
            ])),
        (!_ctx.dnsIsHidden)
          ? (_openBlock(), _createBlock("div", {
              key: 9,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-5" }, [
                _withDirectives(_createVNode("input", {
                  type: "text",
                  class: "form-control input-sm",
                  "onUpdate:modelValue": _cache[46] || (_cache[46] = $event => (_ctx.dnsQuestionName = $event)),
                  placeholder: "DNS question name"
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.dnsQuestionName]
                ])
              ]),
              _createVNode("div", { class: "col-md-3" }, [
                _withDirectives(_createVNode("input", {
                  type: "number",
                  class: "form-control input-sm",
                  "onUpdate:modelValue": _cache[47] || (_cache[47] = $event => (_ctx.dnsTransactionId = $event)),
                  placeholder: "DNS transaction ID"
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.dnsTransactionId]
                ])
              ])
            ]))
          : _createCommentVNode("v-if", true),
        _createVNode("div", { class: "row" }, [
          _createVNode("div", { class: "col-md-12" }, [
            (_ctx.messageType !== 'FormData' && !_ctx.isPreview)
              ? (_openBlock(), _createBlock("button", {
                  key: 0,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[48] || (_cache[48] = $event => (_ctx.previewMessage())),
                  disabled: _ctx.message===''
                }, "preview message", 8 /* PROPS */, ["disabled"]))
              : _createCommentVNode("v-if", true),
            (_ctx.messageType !== 'FormData' && _ctx.isPreview)
              ? (_openBlock(), _createBlock("button", {
                  key: 1,
                  class: "btn btn-default btn-sm",
                  onClick: _cache[49] || (_cache[49] = $event => (_ctx.cancelPreview())),
                  disabled: _ctx.message===''
                }, "cancel preview", 8 /* PROPS */, ["disabled"]))
              : _createCommentVNode("v-if", true),
            _createVNode("button", {
              class: "btn btn-primary btn-sm",
              onClick: _cache[50] || (_cache[50] = $event => (_ctx.sendMessage())),
              disabled: _ctx.isDisconnected
            }, "send message", 8 /* PROPS */, ["disabled"]),
            _createVNode("button", {
              class: "btn btn-default btn-sm",
              onClick: _cache[51] || (_cache[51] = $event => (_ctx.clear())),
              disabled: _ctx.messages.length===0
            }, "clear", 8 /* PROPS */, ["disabled"]),
            _createVNode("button", {
              class: "btn btn-default btn-sm",
              onClick: _cache[52] || (_cache[52] = $event => (_ctx.savingAsBookmark()))
            }, _toDisplayString(_ctx.isEditing ? "cancel bookmark" : "save as bookmark"), 1 /* TEXT */),
            _createVNode("button", {
              class: "btn btn-default btn-sm",
              onClick: _cache[53] || (_cache[53] = $event => (_ctx.toggleFilter()))
            }, _toDisplayString(_ctx.filterIsHidden ? "show filter" : "hide filter"), 1 /* TEXT */)
          ])
        ]),
        (_ctx.isEditing)
          ? (_openBlock(), _createBlock("div", {
              key: 10,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-4" }, [
                _withDirectives(_createVNode("input", {
                  ref: "bookmarkName",
                  type: "text",
                  class: "form-control input-sm",
                  "onUpdate:modelValue": _cache[54] || (_cache[54] = $event => (_ctx.bookmarkName = $event)),
                  placeholder: "bookmark name"
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.bookmarkName]
                ])
              ]),
              _createVNode("div", { class: "col-md-2" }, [
                _createVNode("button", {
                  class: "btn btn-link btn-sm",
                  onClick: _cache[55] || (_cache[55] = $event => (_ctx.saveAsBookmark())),
                  disabled: !_ctx.canSaveAsBookmark
                }, "save", 8 /* PROPS */, ["disabled"])
              ])
            ]))
          : _createCommentVNode("v-if", true),
        (!_ctx.filterIsHidden)
          ? (_openBlock(), _createBlock("div", {
              key: 11,
              class: "row"
            }, [
              _createVNode("div", { class: "col-md-6" }, [
                _withDirectives(_createVNode("input", {
                  ref: "filter",
                  type: "text",
                  class: "form-control input-sm",
                  "onUpdate:modelValue": _cache[56] || (_cache[56] = $event => (_ctx.filter = $event)),
                  placeholder: "filter"
                }, null, 512 /* NEED_PATCH */), [
                  [_vModelText, _ctx.filter]
                ])
              ])
            ]))
          : _createCommentVNode("v-if", true),
        _createVNode("div", { class: "row" }, [
          _createVNode("div", { class: "col-md-12" }, [
            _createVNode("label", null, [
              _withDirectives(_createVNode("input", {
                type: "checkbox",
                "onUpdate:modelValue": _cache[57] || (_cache[57] = $event => (_ctx.showRaw = $event))
              }, null, 512 /* NEED_PATCH */), [
                [_vModelCheckbox, _ctx.showRaw]
              ]),
              _createTextVNode(" show raw data ")
            ]),
            _createVNode("label", null, [
              _withDirectives(_createVNode("input", {
                type: "checkbox",
                "onUpdate:modelValue": _cache[58] || (_cache[58] = $event => (_ctx.showFormatted = $event))
              }, null, 512 /* NEED_PATCH */), [
                [_vModelCheckbox, _ctx.showFormatted]
              ]),
              _createTextVNode(" show formatted data ")
            ])
          ])
        ]),
        _createVNode("div", { class: "row" }, [
          _createVNode("div", { class: "col-md-12" }, [
            _createVNode("ul", null, [
              (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.filteredMessages, (message, index) => {
                return (_openBlock(), _createBlock("li", {
                  key: message.id,
                  class: "visibility-button-container"
                }, [
                  _createVNode("span", { class: "label label-default" }, _toDisplayString(message.moment), 1 /* TEXT */),
                  (message.type==='open')
                    ? (_openBlock(), _createBlock("span", {
                        key: 0,
                        class: "label label-success"
                      }, "open"))
                    : _createCommentVNode("v-if", true),
                  (message.type==='close')
                    ? (_openBlock(), _createBlock("span", {
                        key: 1,
                        class: "label label-danger"
                      }, "close"))
                    : _createCommentVNode("v-if", true),
                  (message.type==='error')
                    ? (_openBlock(), _createBlock("span", {
                        key: 2,
                        class: "label label-danger"
                      }, "error"))
                    : _createCommentVNode("v-if", true),
                  (message.type==='out')
                    ? (_openBlock(), _createBlock("span", {
                        key: 3,
                        class: "label label-info"
                      }, "out"))
                    : _createCommentVNode("v-if", true),
                  (message.type==='in')
                    ? (_openBlock(), _createBlock("span", {
                        key: 4,
                        class: "label label-info"
                      }, "in"))
                    : _createCommentVNode("v-if", true),
                  (message.isBinary === true)
                    ? (_openBlock(), _createBlock("span", {
                        key: 5,
                        class: "label label-warning"
                      }, "binary"))
                    : _createCommentVNode("v-if", true),
                  (message.isBinary === false)
                    ? (_openBlock(), _createBlock("span", {
                        key: 6,
                        class: "label label-warning"
                      }, "string"))
                    : _createCommentVNode("v-if", true),
                  (message.type==='tips')
                    ? (_openBlock(), _createBlock("span", {
                        key: 7,
                        class: "label label-info"
                      }, "tips"))
                    : _createCommentVNode("v-if", true),
                  (message.formattedData || message.rawData || message.tips)
                    ? (_openBlock(), _createBlock("button", {
                        key: 8,
                        class: "btn btn-xs btn-default clipboard",
                        "data-clipboard-target": '#' + _ctx.resultId(message.id)
                      }, "copy", 8 /* PROPS */, ["data-clipboard-target"]))
                    : _createCommentVNode("v-if", true),
                  (message.reason)
                    ? (_openBlock(), _createBlock("span", { key: 9 }, _toDisplayString(message.reason), 1 /* TEXT */))
                    : _createCommentVNode("v-if", true),
                  (message.data)
                    ? (_openBlock(), _createBlock("span", { key: 10 }, _toDisplayString(message.data), 1 /* TEXT */))
                    : _createCommentVNode("v-if", true),
                  (message.formattedData)
                    ? (_openBlock(), _createBlock(_Fragment, { key: 11 }, [
                        (message.visible !== undefined ? message.visible : _ctx.showFormatted)
                          ? (_openBlock(), _createBlock("pre", {
                              key: 0,
                              id: _ctx.resultId(message.id)
                            }, _toDisplayString(message.formattedData), 9 /* TEXT, PROPS */, ["id"]))
                          : (_openBlock(), _createBlock("label", {
                              key: 1,
                              class: "label label-default"
                            }, "formatted")),
                        _createVNode("button", {
                          class: "btn btn-xs btn-default",
                          onClick: $event => (_ctx.toggleMessageVisibility(message)),
                          style: _ctx.visibilityButtonStyle(message)
                        }, _toDisplayString(_ctx.messageVisibility(message) ? "hide" : "show"), 13 /* TEXT, STYLE, PROPS */, ["onClick"])
                      ], 64 /* STABLE_FRAGMENT */))
                    : _createCommentVNode("v-if", true),
                  (message.rawData)
                    ? (_openBlock(), _createBlock(_Fragment, { key: 12 }, [
                        (message.visible !== undefined ? message.visible : _ctx.showRaw)
                          ? (_openBlock(), _createBlock("pre", {
                              key: 0,
                              id: _ctx.resultId(message.id)
                            }, _toDisplayString(message.rawData), 9 /* TEXT, PROPS */, ["id"]))
                          : (_openBlock(), _createBlock("label", {
                              key: 1,
                              class: "label label-default"
                            }, "raw")),
                        _createVNode("button", {
                          class: "btn btn-xs btn-default",
                          onClick: $event => (_ctx.toggleMessageVisibility(message)),
                          style: _ctx.visibilityButtonStyle(message)
                        }, _toDisplayString(_ctx.messageVisibility(message) ? "hide" : "show"), 13 /* TEXT, STYLE, PROPS */, ["onClick"])
                      ], 64 /* STABLE_FRAGMENT */))
                    : _createCommentVNode("v-if", true),
                  (message.tips)
                    ? (_openBlock(), _createBlock("pre", {
                        key: 13,
                        id: _ctx.resultId(message.id)
                      }, _toDisplayString(message.tips), 9 /* TEXT, PROPS */, ["id"]))
                    : _createCommentVNode("v-if", true)
                ]))
              }), 128 /* KEYED_FRAGMENT */))
            ])
          ])
        ])
      ])
    ])
  ]))
}
/* eslint-enable */
// tslint:enable
